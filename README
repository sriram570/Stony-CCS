# README

This is a consensus calling tool created as part of the CSE 549 - Computational Biology final project at 
Stony Brook University. It aims to improve the consensus calling methods used to call Pacbio long reads.

Contributors:

1) Swaminathan Sivaraman

2) Sriram Sundar

3) Shyam Sundar Chandrasekaran

4) Prasanth Sridhar

(Stony Brook University, New York, USA)

Details:
=======
The main tool is a python script named stonyccs.py that takes as input a Pacbio subreads bam(sorted) file and calls
a consensus for each bunch or "well" of reads. It makes use of the included poaligner.py and consensus.py modules 
to do the consensus calling.

The tool performs ordering heuristics using STAR or a modified "forward-backward" version of STAR before doing a POA.
After doing a POA and generating a graph, the tool can use different scoring and traversal algorithms to generate
the consensus string. Both the ordering heuristic and the scoring and traversal algorithms can be changed using
command-line options.

The script also needs a scoring matrix. Two popular matrices - blosum62 and blosum80 have been included to be used.
(blosum62 is generally preferred for Pacbio data)

How To Run:
==========
1) Execute make

2) Run 'python stonyccs.py' with the required options. Do '--help' for details

3) To clean, use 'make clean'

Tests:
=====
We have performed tests ont the new stonyccs tool and compared it with pacbio's
ccs(baseline) results. There are two tests run:

1) Sample well tests:

   Here, we took a single well of reads (total 6) and ran extensive tests using
   various combinations of stonyccs' algorithms. We mostly used blosum62 and
   sometimes blosum80 as the scoring matrices. All test results are present in
   the sample_tests directory. The bam file used is named as sample_bam.bam. Each
   test case has its own directory named after the test case and inside, there is
   a consensus.fa file, blasr_report.txt and stonyccs_report.txt, which has the
   consensus, the mapping details to the reference and the full details of the
   configuration used respectively. Most of the testcases are in the
   sample_tests/all_filters directory.

2) Full data tests:

   Here, we sorted the pacbio bam file (from https://downloads.pacbcloud.com/public/SequelData/ArabidopsisDemoData/SequenceData/3_C01_customer/)
   and sorted it by queryname and created a sorted bam file. We then chose the
   best-performing configurations from the above sample well tests and ran tests
   for those configurations on this full dataset. All results are filed under
   full_data_tests. The test case details are saved in a manner similar to the
   above sample well case.

Notes:
=====
1) This script must be run only on pacbio bam files sorted by queryname 
   (Use 'samtools sort -n' to sort an unsorted .bam file)
   
2) We have included Christopher Lee's POA library in this repository to do the actual Partial-Order Alignment. It
   is included in the 'external' directory (Link - https://sourceforge.net/projects/poamsa/)

External dependencies:
=====================
1) samtools - http://www.htslib.org/doc/samtools-1.1.html

2) pysam python module - https://github.com/pysam-developers/pysam
